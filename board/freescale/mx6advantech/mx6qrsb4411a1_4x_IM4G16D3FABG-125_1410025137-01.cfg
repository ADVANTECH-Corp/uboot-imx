/*
 * Copyright (C) 2011-2013 Freescale Semiconductor, Inc.
 * Jason Liu <r64343@freescale.com>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not write to the Free Software
 * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
 * MA 02110-1301 USA
 *
 * Refer docs/README.imxmage for more details about how-to configure
 * and create imximage boot image
 *
 * The syntax is taken as close as possible with the kwbimage
 */

#define __ASSEMBLY__
#include <config.h>

/* image version */

IMAGE_VERSION 2

/*
 * Boot Device : one of spi, sd, sata
 * the board has no nand and eimnor
 * spinor: flash_offset: 0x0400
 * sata:   flash_offset: 0x0400
 * sd/mmc: flash_offset: 0x0400
 */

/* the same flash_offset as sd */
BOOT_FROM      sd

#ifdef CONFIG_USE_PLUGIN
/*PLUGIN    plugin-binary-file    IRAM_FREE_START_ADDR*/
PLUGIN	board/freescale/mx6qsabresd/plugin.bin 0x00907000
#else

#ifdef CONFIG_SECURE_BOOT
SECURE_BOOT
#endif

/*
 * Device Configuration Data (DCD)
 *
 * Each entry must have the format:
 * Addr-type           Address        Value
 *
 * where:
 *      Addr-type register length (1,2 or 4 bytes)
 *      Address   absolute address of the register
 *      value     value to be stored in the register
 */
//DDR IO TYPE:
DATA 4, 0x020e0798, 0x000c0000 // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE - DDR_SEL=11 
DATA 4, 0x020e0758, 0x00000000 // IOMUXC_SW_PAD_CTL_GRP_DDRPKE - PKE=0 , Pull disabled for all, except DQS.,

//CLOCK:
DATA 4, 0x020e0588, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0 - DSE=101, DDR_INPUT=0, HYS=0,
DATA 4, 0x020e0594, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1 - DSE=101, DDR_INPUT=0, HYS=0,

//ADDRESS:
DATA 4, 0x020e056c, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e0578, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e074c, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_ADDDS - DSE=110

//CONTROL:
DATA 4, 0x020e057c, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET - DSE=110, DDR_INPUT=1, HYS=0, DDR_SEL=00

DATA 4, 0x020e058c, 0x00000000 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2
DATA 4, 0x020e059c, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0
DATA 4, 0x020e05a0, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1
DATA 4, 0x020e078c, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_CTLDS - DSE=110

//DATA STROBE:
DATA 4, 0x020e0750, 0x00020000 // IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL - DDR_INPUT=0, CMOS,,
//in case of DDR timing issue on your board you can try DDR_MODE:  [= 0x00020000]

DATA 4, 0x020e05a8, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 - DSE=110
DATA 4, 0x020e05b0, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 - DSE=110
DATA 4, 0x020e0524, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 - DSE=110
DATA 4, 0x020e051c, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 - DSE=110
DATA 4, 0x020e0518, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 - DSE=110
DATA 4, 0x020e050c, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 - DSE=110
DATA 4, 0x020e05b8, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 - DSE=110
DATA 4, 0x020e05c0, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 - DSE=110

//DATA:
DATA 4, 0x020e0774, 0x00020000 // IOMUXC_SW_PAD_CTL_GRP_DDRMODE- DDR_INPUT 0,CMOS,,
//in case of DDR timing issue on your board you can try DDR_MODE:  [= 0x00020000]

DATA 4, 0x020e0784, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B0DS - DSE=110
DATA 4, 0x020e0788, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B1DS - DSE=110
DATA 4, 0x020e0794, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B2DS - DSE=110
DATA 4, 0x020e079c, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B3DS - DSE=110
DATA 4, 0x020e07a0, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B4DS - DSE=110
DATA 4, 0x020e07a4, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B5DS - DSE=110
DATA 4, 0x020e07a8, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B6DS - DSE=110
DATA 4, 0x020e0748, 0x00000028 // IOMUXC_SW_PAD_CTL_GRP_B7DS - DSE=110

DATA 4, 0x020e05ac, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0 - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e05b4, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1 - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e0528, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2 - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e0520, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3 - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e0514, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4 - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e0510, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5 - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e05bc, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6 - DSE=110, DDR_INPUT=1, HYS=0,
DATA 4, 0x020e05c4, 0x00000028 // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7 - DSE=110, DDR_INPUT=1, HYS=0,

//######################################################
//Calibrations:
//######################################################
// ZQ:
DATA 4, 0x021b0800, 0xa1390003 // DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.,,

// write leveling
DATA 4, 0x021b080c, 0x001F001F
DATA 4, 0x021b0810, 0x001F001F

DATA 4, 0x021b480c, 0x001F001F
DATA 4, 0x021b4810, 0x001F001F

//DQS gating, write delay calibration values based on calibration compare of 0x00ffff00:,,
// It is highly recommended for the user to run calibration code on her/his specific board 
//and replace following delay values accordingly: 

//Read DQS Gating calibration
DATA 4, 0x021b083c, 0x035C0374
DATA 4, 0x021b0840, 0x0354035C
DATA 4, 0x021b483c, 0x03580364
DATA 4, 0x021b4840, 0x03580330

//Read calibration
DATA 4, 0x021b0848, 0x463A3644
DATA 4, 0x021b4848, 0x3A3C3442

//Write calibration
DATA 4, 0x021b0850, 0x40444E44
DATA 4, 0x021b4850, 0x48384A42

//read data bit delay: (3 is the reccommended default value,:
DATA 4, 0x021b081c, 0x33333333 // DDR_PHY_P0_MPREDQBY0DL3
DATA 4, 0x021b0820, 0x33333333 // DDR_PHY_P0_MPREDQBY1DL3
DATA 4, 0x021b0824, 0x33333333 // DDR_PHY_P0_MPREDQBY2DL3
DATA 4, 0x021b0828, 0x33333333 // DDR_PHY_P0_MPREDQBY3DL3
DATA 4, 0x021b481c, 0x33333333 // DDR_PHY_P1_MPREDQBY0DL3
DATA 4, 0x021b4820, 0x33333333 // DDR_PHY_P1_MPREDQBY1DL3
DATA 4, 0x021b4824, 0x33333333 // DDR_PHY_P1_MPREDQBY2DL3
DATA 4, 0x021b4828, 0x33333333 // DDR_PHY_P1_MPREDQBY3DL3

//######################################################
// Complete calibration by forced measurment:
//######################################################
DATA 4, 0x021b08b8, 0x00000800 // DDR_PHY_P0_MPMUR0, frc_msr,,
DATA 4, 0x021b48b8, 0x00000800 // DDR_PHY_P0_MPMUR0, frc_msr,,

//######################################################
//MMDC init:

//528MHz
//in DDR3, only MMDC0 is initiated:,,
DATA 4, 0x021b0004, 0x00020036	// MMDC0_MDPDC see spread sheet for timings. tCKE=3CLK; tCKSRX=5CLK; tCKSRE=5CLK"
DATA 4, 0x021b0008, 0x09444040	// MMDC0_MDOTC see spread sheet for timings. tAOFPD=2CLK; tAONPD=2CLK; tANPD=5CLK; tAXPD=5CLK; tODTLon=6CLK;"

DATA 4, 0x021b000c, 0x898E7953 // MMDC0_MDCFG0 see spread sheet for timings. tRFC=139CLK; tXS=144CLK; tXP=4CLK; tXPDLL=13CLK; tFAW=27CLK; CL=7
DATA 4, 0x021b0010, 0xB68E8F64 // MMDC0_MDCFG1 see spread sheet for timings. tCL=7CLK; tRCD=7CLK; tRP=7CLK; tRC=27CLK; tRAS=20CLK; tWR=8CLK; tMRD=12CLK; tCWL=6CLK
DATA 4, 0x021b0014, 0x01FF00DB // MMDC0_MDCFG2. tDLLK=512CLK; tRTP=6CLK; tWTR=6CLK; tRRD=6CLK

DATA 4, 0x021b0018, 0x00011740 // MMDC0_MDMISC, RALAT=0x5,,
//MDMISC: RALAT kept to the high level of 5. 
//MDMISC: consider reducing RALAT if your 528MHz board design allow that. Lower RALAT benefits: 
//a. better operation at low frequency
//b. Small performence improvment

DATA 4, 0x021b001c, 0x00008000 // MMDC0_MDSCR

DATA 4, 0x021b002c, 0x000026D2 // MMDC0_MDRWD
DATA 4, 0x021b0030, 0x008E1023 // MMDC0_MDOR - tXPR - 139CLK; SDE_to_RST - 14CLK; RST_to_CKE - 33CLK
DATA 4, 0x021b0040, 0x00000047 // CS0_END - 0x4fffffff 

//IPU error and should remove
//DATA 4, 0x021b0400, 0x11420000 //MMDC0_MAARCR ADOPT optimized priorities. Dyn jump disabled
//DATA 4, 0x021b4400, 0x11420000

DATA 4, 0x021b0000, 0x841A0000 // MMDC0_MDCTL - row - 15bits; col= 10bits; burst length 8; 64-bit data bus

//######################################################
// Initialize 2GB DDR3 - Micron MT41J128M 
//MR2:
DATA 4, 0x021b001c, 0x02088032 // MMDC0_MDSCR
DATA 4, 0x021b001c, 0x0408803A // MMDC0_MDSCR
//MR3:
DATA 4, 0x021b001c, 0x00008033 // MMDC0_MDSCR
DATA 4, 0x021b001c, 0x0000803B // MMDC0_MDSCR

DATA 4, 0x021b001c, 0x00048031 // MMDC0_MDSCR
DATA 4, 0x021b001c, 0x00048039 // MMDC0_MDSCR
//MR0:
DATA 4, 0x021b001c, 0x19208030 // MMDC0_MDSCR
DATA 4, 0x021b001c, 0x09408038 // MMDC0_MDSCR

//DDR device ZQ calibration:
DATA 4, 0x021b001c, 0x04008040 // MMDC0_MDSCR
DATA 4, 0x021b001c, 0x04008048 // MMDC0_MDSCR
//######################################################
//final DDR setup

DATA 4, 0x021b0020, 0x00007800 // MMDC0_MDREF, enable auto refresh, set refresh rate.,

//Following ODT setup (0x11117, : i.mx_ODT=DDR_device_ODT=120OHm.,,
//User might to also interested in trying the value of 0x00000007, DDR_device_ODT=120Ohm.,,
//0x00000007 saves more power, running with no ODT has it's implications ,,
// of signal integrity and should be carefully simulated during board design.

DATA 4, 0x021b0818, 0x00022227 // DDR_PHY_P0_MPODTCTRL, ODT enable,,
DATA 4, 0x021b4818, 0x00022227 // DDR_PHY_P1_MPODTCTRL

DATA 4, 0x021b0004, 0x00025576 // MMDC0_MDPDC see spread sheet for timings, SDCTL power down enabled,,

DATA 4, 0x021b0404, 0x00011006 //MMDC0_MAPSR ADOPT power down enabled

DATA 4, 0x021b001c, 0x00000000 // MMDC0_MDSCR



/* set the default clock gate to save power */
DATA 4, 0x020c4068, 0x00C03F3F
DATA 4, 0x020c406c, 0x0030FC03
DATA 4, 0x020c4070, 0x0FFFC000
DATA 4, 0x020c4074, 0x3FF00000
DATA 4, 0x020c4078, 0x00FFF300
DATA 4, 0x020c407c, 0x0F0000F3
DATA 4, 0x020c4080, 0x000003FF

/* enable AXI cache for VDOA/VPU/IPU */
DATA 4, 0x020e0010, 0xF00000CF
/* set IPU AXI-id0 Qos=0xf(bypass) AXI-id1 Qos=0x7 */
DATA 4, 0x020e0018, 0x007F007F
DATA 4, 0x020e001c, 0x007F007F
#endif
